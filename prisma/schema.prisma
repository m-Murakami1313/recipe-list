// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  recipe        Recipe[]
  list          List[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Recipe {
  id          String        @id @default(cuid())
  recipeName  String
  user        User[]
  ingredients Ingredients[]
  process     Process[]
  List_Recipe List_Recipe[]
  createdAt   DateTime?     @default(now())
  updated_at  DateTime?     @updatedAt
}

model Ingredients {
  id              String    @id @default(cuid())
  ingredientsName String
  weight          String
  recipe          Recipe    @relation(fields: [recipeId], references: [id])
  recipeId        String
  createdAt       DateTime? @default(now())
  updated_at      DateTime? @updatedAt
}

model Process {
  id          String    @id @default(cuid())
  processNo   Int
  processName String
  recipe      Recipe    @relation(fields: [recipeId], references: [id])
  recipeId    String
  createdAt   DateTime? @default(now())
  updated_at  DateTime? @updatedAt
}

model List {
  id          String        @id @default(cuid())
  listName    String
  user        User[]
  List_Recipe List_Recipe[]
}

model List_Recipe {
  id       String @id @default(cuid())
  list     List   @relation(fields: [listId], references: [id])
  listId   String
  recipe   Recipe @relation(fields: [recipeId], references: [id])
  recipeId String
  tableNo  Int
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
